import { Telegraf, Context, Markup } from 'telegraf';
import { config } from 'dotenv';
import { UserService } from './user';
import { OrderService } from './order';
import { PaymentService } from './payment';
import { RunwayService } from './runway';
import { FileService } from './file';
import { MockService } from './mock';
import { AnalyticsService } from './analytics';

config();

export class TelegramService {
  private bot: Telegraf;
  private userService: UserService;
  private orderService: OrderService;
  private paymentService: PaymentService;
  private runwayService: RunwayService;
  private fileService: FileService;
  private mockService: MockService;
  private analyticsService: AnalyticsService;
  private pendingPrompts: Map<number, string> = new Map(); // userId -> fileId
  private userMessages: Map<number, { messageId: number; chatId: number }> = new Map(); // userId -> {messageId, chatId}
  private waitingForEmail: Set<number> = new Set(); // userId -> waiting for email input

  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
    this.userService = new UserService();
    this.orderService = new OrderService();
    this.paymentService = new PaymentService();
    this.runwayService = new RunwayService();
    this.fileService = new FileService();
    this.mockService = new MockService();
    this.analyticsService = new AnalyticsService();
    
    this.setupHandlers();
  }

  private async editOrSendMessage(ctx: Context, text: string, extra?: any): Promise<void> {
    const userId = ctx.from!.id;
    const chatId = ctx.chat!.id;
    const userMessage = this.userMessages.get(userId);

    try {
      if (userMessage && userMessage.chatId === chatId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.editMessageText(
          chatId,
          userMessage.messageId,
          undefined,
          text,
          extra
        );
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = await ctx.reply(text, extra);
        if (message && 'message_id' in message) {
          this.userMessages.set(userId, {
            messageId: (message as any).message_id,
            chatId: chatId
          });
        }
      }
    } catch (error: any) {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      if (error.code === 400 || error.description?.includes('message') || error.description?.includes('not found')) {
        const message = await ctx.reply(text, extra);
        if (message && 'message_id' in message) {
          this.userMessages.set(userId, {
            messageId: (message as any).message_id,
            chatId: chatId
          });
        }
      } else {
        throw error;
      }
    }
  }

  private async deleteUserMessage(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    const userMessage = this.userMessages.get(userId);

    if (userMessage) {
      try {
        await ctx.telegram.deleteMessage(userMessage.chatId, userMessage.messageId);
        this.userMessages.delete(userId);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        console.error('Error deleting message:', error);
      }
    }
  }

  private formatLink(url: string, text: string = '–°—Å—ã–ª–∫–∞'): string {
    return `<a href="${url}">${text}</a>`;
  }

  private getBackButton(): any[] {
    return [Markup.button.callback('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', 'back_to_menu')];
  }

  private getMainReplyKeyboard(userId: number): any {
    const keyboard = [
      [Markup.button.text('üé¨ –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ')],
      [Markup.button.text('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã')],
      [
        Markup.button.text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        Markup.button.text('‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
      ],
      [
        Markup.button.text('üé¨ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'),
        Markup.button.text('üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞')
      ]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (this.isAdmin(userId)) {
      keyboard.push([Markup.button.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')]);
    }

    return {
      keyboard: keyboard,
      resize_keyboard: true
    };
  }

  private setupHandlers() {
    // Auto-welcome for new users (only for non-command messages)
    this.bot.use(async (ctx, next) => {
      if (ctx.from && ctx.message && 'text' in ctx.message && !ctx.message.text.startsWith('/')) {
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user) {
          // New user - show welcome message
          await this.handleStart(ctx);
          return;
        }
      }
      return next();
    });
    
    // Start command
    this.bot.start(this.handleStart.bind(this));
    
    // Help command
    this.bot.help(this.handleHelp.bind(this));
    
    // Mock payment command (for testing)
    this.bot.command('mock_pay', this.handleMockPayment.bind(this));
    
    // Orders command
    this.bot.command('orders', this.showUserOrders.bind(this));
    
    // Analytics command (admin only)
    this.bot.command('stats', this.showAnalytics.bind(this));
    
    // Photo handler
    this.bot.on('photo', this.handlePhoto.bind(this));
    
    // Document handler (for other image formats)
    this.bot.on('document', this.handleDocument.bind(this));
    
    // Text handler for prompts
    this.bot.on('text', this.handleText.bind(this));
    
    // Callback query handler
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    
    // Error handler
    this.bot.catch(async (err, ctx) => {
      console.error('Bot error:', err);
      if (ctx.from && ctx.chat) {
        await this.editOrSendMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }

  private async handleStart(ctx: Context) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ /start param, —Ç–∞–∫ –∏ deep links —á–µ—Ä–µ–∑ ctx.startParam
    let startParam = null;
    if (ctx.message && 'text' in ctx.message) {
      const textParts = ctx.message.text.split(' ');
      if (textParts.length > 1) {
        startParam = textParts[1];
      }
    }
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º deep link –ø–∞—Ä–∞–º–µ—Ç—Ä
    if (!startParam && (ctx as any).startParam) {
      startParam = (ctx as any).startParam;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å startParam, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É—á—Ç–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    const user = await this.userService.getOrCreateUser(ctx.from!, startParam || undefined);
    
    // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
    if (startParam) {
      console.log(`User ${ctx.from?.id} started bot with parameter: ${startParam}`);
      await this.analyticsService.updateCampaignStats(startParam);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    const isAdminUser = this.isAdmin(ctx.from!.id);
    console.log(`User ${ctx.from?.id} (${ctx.from?.username || 'no username'}) is admin: ${isAdminUser}`);
    
    await this.showMainMenu(ctx);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.message && 'message_id' in ctx.message && ctx.chat) {
      try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–∞–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã)
        console.error('Error deleting /start message:', error);
      }
    }
  }

  private async showMainMenu(ctx: Context) {
    const welcomeMessage = `
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vividus Bot!

–Ø –ø–æ–º–æ–≥—É –æ–∂–∏–≤–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

üì∏ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–ø—Ä–æ–º–ø—Ç–æ–º)
2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 2-5 –º–∏–Ω—É—Ç!

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ä—É–±–ª—å –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

üëâ –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:`;
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    const user = await this.userService.getOrCreateUser(ctx.from!);
    const generations = await this.userService.getUserGenerations(ctx.from!.id);
    
    // –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
    const keyboard = [
      [Markup.button.text('üé¨ –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ')],
      [Markup.button.text('‚ú® –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'),Markup.button.text('‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞')],
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (this.isAdmin(ctx.from!.id)) {
      keyboard.push([Markup.button.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')]);
    }

    // –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
    const message = await ctx.reply(welcomeMessage, {
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true
      }
    });
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (message && 'message_id' in message) {
      this.userMessages.set(ctx.from!.id, {
        messageId: (message as any).message_id,
        chatId: ctx.chat!.id
      });
    }
  }

  private async handleHelp(ctx: Context) {
    const helpMessage = `
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (JPG, PNG)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ!

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 109 —Ä—É–±–ª–µ–π –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2-5 –º–∏–Ω—É—Ç

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @in_a_state_of_flux

–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!`;
    
        await this.editOrSendMessage(ctx, helpMessage, {
          reply_markup: {
            inline_keyboard: [this.getBackButton()]
          }
        });
  }

  private async handlePhoto(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const photo = (ctx.message as any)['photo'];
      
      // Get the highest quality photo
      const fileId = photo[photo.length - 1].file_id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ caption (—Ç–µ–∫—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫ —Ñ–æ—Ç–æ)
      const caption = (ctx.message as any)['caption'];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
      await this.deleteUserMessage(ctx);
      
      if (caption) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å caption, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
        this.pendingPrompts.set(user.telegram_id, fileId);
        await this.processPrompt(ctx, user, caption);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç caption, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç
        const promptMessage = 'üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞—à–µ—Ç —Ä—É–∫–æ–π", "—É–ª—ã–±–∞–µ—Ç—Å—è", "–º–æ—Ä–≥–∞–µ—Ç", "–¥—ã—à–∏—Ç" –∏ —Ç.–¥.';
        
        await this.editOrSendMessage(ctx, promptMessage, {
          reply_markup: {
            inline_keyboard: [
              [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç', 'skip_prompt')],
              this.getBackButton()
            ]
          }
        });
        
        // Store file ID for later processing
        this.pendingPrompts.set(user.telegram_id, fileId);
      }
      
    } catch (error) {
      console.error('Error handling photo:', error);
      await this.editOrSendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleDocument(ctx: Context) {
    const document = (ctx.message as any)['document'];
    const mimeType = document.mime_type;
    
    if (mimeType && mimeType.startsWith('image/')) {
      await this.handlePhoto(ctx);
    } else {
      await this.editOrSendMessage(ctx, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.');
    }
  }

  private async processPrompt(ctx: Context, user: any, promptText: string): Promise<void> {
    try {
      const fileId = this.pendingPrompts.get(user.telegram_id);
      if (!fileId) {
        await this.editOrSendMessage(ctx, '‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ!');
        return;
      }
      
      // Remove from pending prompts
      this.pendingPrompts.delete(user.telegram_id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
      await this.editOrSendMessage(ctx, 'üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –≤ –æ–±–ª–∞–∫–æ...');
      
      const s3Url = await this.fileService.downloadTelegramFileToS3(fileId);
      
      // Process the prompt
      let processedPrompt = promptText.toLowerCase().trim();
      const originalPrompt = promptText;
      
      if (processedPrompt === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || processedPrompt === 'skip') {
        processedPrompt = 'animate this image with subtle movements and breathing effect';
      } else {
        // Translate Russian prompts to English for better AI understanding
        let translatedPrompt = this.translatePrompt(processedPrompt);
        
        // –£–±–∏—Ä–∞–µ–º "animate this image with" –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ–≥–æ —É–∫–∞–∑–∞–ª
        translatedPrompt = translatedPrompt.replace(/^animate this image with\s*/i, '');
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å "animate this image with"
        processedPrompt = `animate this image with ${translatedPrompt}`;
      }
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
      await this.deleteUserMessage(ctx);
      
      await this.editOrSendMessage(ctx, `üé¨ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–º–ø—Ç: "${originalPrompt}"\n\n‚è≥ –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userGenerations = await this.userService.getUserGenerations(user.telegram_id);
      
      if (userGenerations >= 1) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        const deducted = await this.userService.deductGenerations(user.telegram_id, 1);
        
        if (!deducted) {
          await this.editOrSendMessage(ctx, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n‚ú® –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–µ–Ω—é.');
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing (–±–µ–∑ –æ–ø–ª–∞—Ç—ã)
        const order = await this.orderService.createOrder(user.id, s3Url, 0, processedPrompt);
        await this.orderService.updateOrderStatus(order.id, 'processing' as any);
        
        const remainingGenerations = await this.userService.getUserGenerations(user.telegram_id);
        
        await this.deleteUserMessage(ctx);
        await this.editOrSendMessage(ctx, `‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å: ${remainingGenerations}\n\nüé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ...\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç.`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
        const { ProcessorService } = await import('./processor');
        const processorService = new ProcessorService();
        await processorService.processOrder(order.id);
      } else {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await this.deleteUserMessage(ctx);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º fileId –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º pendingPrompts –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ
        const tempOrderId = `temp_${Date.now()}_${user.telegram_id}`;
        this.pendingPrompts.set(user.telegram_id, fileId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        const noGenerationsMessage = `üíº –£ –≤–∞—Å –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ

üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
üé¨ –ü—Ä–æ–º–ø—Ç: "${originalPrompt ? originalPrompt : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è'}"

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;
        
        // –ü–∞–∫–µ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        const packages = [
          { count: 1, originalPrice: 105 },
          { count: 3, originalPrice: 315 },
          { count: 5, originalPrice: 525 },
          { count: 10, originalPrice: 950 }
        ];
        
        const keyboard = packages.map(pkg => {
          // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π 33% (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è * 0.67)
          const discountedPrice = Math.round(pkg.originalPrice * 0.67);
          const buttonText = `~~${pkg.originalPrice}‚ÇΩ~~ ${discountedPrice}‚ÇΩ ‚Üí ${pkg.count} ${this.getGenerationWord(pkg.count)} -33%`;
          return [
            Markup.button.callback(
              buttonText,
              `buy_and_process_${pkg.count}_${discountedPrice}`
            )
          ];
        });
        
        keyboard.push(this.getBackButton());
        
        await this.editOrSendMessage(ctx, noGenerationsMessage, {
          reply_markup: {
            inline_keyboard: keyboard
          }
        });
      }
      
    } catch (error) {
      console.error('Error processing prompt:', error);
      await this.editOrSendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleText(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const text = (ctx.message as any).text;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ email
      if (this.waitingForEmail.has(ctx.from!.id)) {
        await this.processEmailInput(ctx, text);
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç reply –∫–Ω–æ–ø–æ–∫
      if (text === 'üé¨ –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ') {
        await this.editOrSendMessage(ctx, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏!');
        return;
      }
      
      if (text === '‚ú® –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏') {
        await this.handleBuyGenerations(ctx);
        return;
      }
      
      if (text === 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
        await this.showUserOrders(ctx);
        return;
      }
      
      if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
        await this.handleSettings(ctx);
        return;
      }
      
      if (text === '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
        await this.handleHelp(ctx);
        return;
      }
      
      if (text === 'üé¨ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç') {
        await this.handleGetResult(ctx);
        return;
      }
      
      if (text === 'üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞') {
        await this.handleTestPayment(ctx);
        return;
      }
      
      if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' && this.isAdmin(ctx.from!.id)) {
        await this.showAnalytics(ctx);
        return;
      }
      
      // Check if user has pending photo
      const fileId = this.pendingPrompts.get(user.telegram_id);
      if (!fileId) {
        // User doesn't have pending photo, treat as regular message
        await this.editOrSendMessage(ctx, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏!');
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
      await this.processPrompt(ctx, user, text);
      
    } catch (error) {
      console.error('Error handling text:', error);
      await this.editOrSendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private translatePrompt(russianPrompt: string): string {
    // Simple Russian to English translation for common animation prompts
    const translations: { [key: string]: string } = {
      '–º–∞—à–µ—Ç —Ä—É–∫–æ–π': 'waving hand',
      '—É–ª—ã–±–∞–µ—Ç—Å—è': 'smiling',
      '–º–æ—Ä–≥–∞–µ—Ç': 'blinking',
      '–¥—ã—à–∏—Ç': 'breathing',
      '–∫–∏–≤–∞–µ—Ç': 'nodding',
      '–∫–∞—á–∞–µ—Ç –≥–æ–ª–æ–≤–æ–π': 'shaking head',
      '–ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç': 'winking',
      '—Å–º–µ–µ—Ç—Å—è': 'laughing',
      '–ø–ª–∞—á–µ—Ç': 'crying',
      '–∑–ª–∏—Ç—Å—è': 'angry expression',
      '—É–¥–∏–≤–ª—è–µ—Ç—Å—è': 'surprised expression',
      '–≥—Ä—É—Å—Ç–Ω—ã–π': 'sad expression',
      '—Å—á–∞—Å—Ç–ª–∏–≤—ã–π': 'happy expression',
      '—Ç–∞–Ω—Ü—É–µ—Ç': 'dancing',
      '–±–µ–≥–∞–µ—Ç': 'running',
      '–∏–¥–µ—Ç': 'walking',
      '–ø—Ä—ã–≥–∞–µ—Ç': 'jumping',
      '—Å–∏–¥–∏—Ç': 'sitting',
      '—Å—Ç–æ–∏—Ç': 'standing',
      '–ª–µ–∂–∏—Ç': 'lying down',
      '–≥–æ–≤–æ—Ä–∏—Ç': 'speaking',
      '–ø–æ–µ—Ç': 'singing',
      '—á–∏—Ç–∞–µ—Ç': 'reading',
      '–ø–∏—à–µ—Ç': 'writing',
      '—Ä–∏—Å—É–µ—Ç': 'drawing',
      '–∏–≥—Ä–∞–µ—Ç': 'playing',
      '—Ä–∞–±–æ—Ç–∞–µ—Ç': 'working',
      '—Å–ø–∏—Ç': 'sleeping',
      '–µ—Å—Ç': 'eating',
      '–ø—å–µ—Ç': 'drinking'
    };
    
    // Try to find exact match first
    if (translations[russianPrompt]) {
      return translations[russianPrompt];
    }
    
    // Try to find partial matches
    for (const [russian, english] of Object.entries(translations)) {
      if (russianPrompt.includes(russian)) {
        return english;
      }
    }
    
    // If no translation found, return the original prompt
    // RunwayML should handle Russian text reasonably well
    return russianPrompt;
  }

  private async handleCallbackQuery(ctx: Context) {
    const callbackData = (ctx.callbackQuery as any)['data'];
    
    switch (callbackData) {
      case 'my_orders':
        await this.showUserOrders(ctx);
        break;
      case 'help':
        await this.handleHelp(ctx);
        break;
      case 'show_stats':
        await this.showAnalytics(ctx);
        break;
      case 'mock_payment':
        await this.handleMockPayment(ctx);
        break;
      case 'get_result':
        await this.handleGetResult(ctx);
        break;
      case 'pay_order':
        await this.handlePayOrder(ctx);
        break;
      case 'skip_prompt':
        const user = await this.userService.getOrCreateUser(ctx.from!);
        await this.processPrompt(ctx, user, '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
        break;
      case 'back_to_menu':
        // –£–¥–∞–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try {
          await ctx.reply('‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', {
            reply_markup: {
              remove_keyboard: true
            }
          });
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
        await this.showMainMenu(ctx);
        break;
      case 'test_payment':
        await this.handleTestPayment(ctx);
        break;
      case 'settings':
        await this.handleSettings(ctx);
        break;
      case 'set_email':
        await this.handleSetEmail(ctx);
        break;
      case 'clear_email':
        await this.handleClearEmail(ctx);
        break;
      case 'cancel_email':
        this.waitingForEmail.delete(ctx.from!.id);
        await this.handleSettings(ctx);
        break;
      case 'buy_generations_stars':
        await ctx.answerCbQuery('–û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
        break;
      default:
        if (callbackData.startsWith('pay_')) {
          const orderId = callbackData.replace('pay_', '');
          await this.handlePayOrder(ctx, orderId);
        } else if (callbackData.startsWith('buy_generations_')) {
          // –§–æ—Ä–º–∞—Ç: buy_generations_{count}_{price}
          const parts = callbackData.replace('buy_generations_', '').split('_');
          if (parts.length === 2) {
            const count = parseInt(parts[0], 10);
            const price = parseInt(parts[1], 10);
            if (!isNaN(count) && !isNaN(price)) {
              await this.handlePurchaseGenerations(ctx, count, price);
            } else {
              console.error(`Invalid buy_generations callback: ${callbackData}`);
              await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }
          } else {
            console.error(`Invalid buy_generations callback format: ${callbackData}`);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
          }
        }
        break;
    }
    
    await ctx.answerCbQuery();
  }

  private async sendPaymentRequest(ctx: Context, order: any, customPrompt?: string) {
    const paymentMessage = `
üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞

üì∏ –§–æ—Ç–æ: –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
üé¨ –ü—Ä–æ–º–ø—Ç: ${customPrompt ? `"${customPrompt}"` : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è'}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} —Ä—É–±–ª–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`;
    
    await this.editOrSendMessage(ctx, paymentMessage, {
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', `pay_${order.id}`)],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')],
          this.getBackButton()
        ]
      }
    });
  }

  private async showUserOrders(ctx: Context) {
    const user = await this.userService.getOrCreateUser(ctx.from!);
    const orders = await this.orderService.getUserOrders(user.id);
    
    if (orders.length === 0) {
      await this.editOrSendMessage(ctx, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!');
      return;
    }
    
    let message = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
    const completedOrders = orders.filter(order => order.status === 'completed');
    
    for (const order of orders) {
      const status = this.getOrderStatusText(order.status);
      message += `üÜî ${order.id.slice(0, 8)}...\n`;
      message += `üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
      message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} —Ä—É–±\n`;
      message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n\n`;
    }
    
    // Add buttons for completed orders
    const keyboard = [];
    if (completedOrders.length > 0) {
      keyboard.push([Markup.button.callback('üé¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', 'get_result')]);
    }
    keyboard.push(this.getBackButton());
    
    await this.editOrSendMessage(ctx, message, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }

  private isAdmin(userId: number): boolean {
    const adminIds = process.env.ADMIN_TELEGRAM_IDS?.split(',').map(id => parseInt(id)) || [];
    return adminIds.includes(userId);
  }

  private async showAnalytics(ctx: Context) {
    if (!this.isAdmin(ctx.from!.id)) {
      await this.editOrSendMessage(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      return;
    }

    try {
      const analytics = await this.analyticsService.getCampaignAnalytics();
      
      if (analytics.length === 0) {
        await this.editOrSendMessage(ctx, 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞');
        return;
      }

      let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:\n\n';
      
      for (const stat of analytics) {
        message += `üè∑Ô∏è **${stat.campaign_name}**\n`;
        message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stat.total_users}\n`;
        message += `üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç: ${stat.total_payments_rub} —Ä—É–±\n`;
        message += `‚≠ê –°—É–º–º–∞ –≤ stars: ${stat.total_payments_stars}\n`;
        message += `üé¨ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stat.completed_orders}\n`;
        message += `üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stat.conversion_rate}%\n\n`;
      }

      await this.editOrSendMessage(ctx, message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [this.getBackButton()]
        }
      });
    } catch (error) {
      console.error('Error showing analytics:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  private async handlePayOrder(ctx: Context, orderId?: string) {
    if (!orderId) {
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞');
      return;
    }
    
    try {
      const order = await this.orderService.getOrder(orderId);
      if (!order) {
        await this.editOrSendMessage(ctx, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // Create payment
      const payment = await this.paymentService.createPayment(order.id, order.price);
      
      // Generate YooMoney payment URL
      const paymentUrl = await this.paymentService.generatePaymentUrl(payment.id, order.price);
      
      const paymentMessage = `
üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞

üÜî –ó–∞–∫–∞–∑: ${order.id.slice(0, 8)}...
üí∞ –°—É–º–º–∞: ${order.price} —Ä—É–±–ª–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ ${this.formatLink(paymentUrl, '—Å—Å—ã–ª–∫–µ')}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.`;
      
      await this.editOrSendMessage(ctx, paymentMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', paymentUrl)],
            this.getBackButton()
          ]
        }
      });
      
    } catch (error) {
      console.error('Error creating payment:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleTestPayment(ctx: Context) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testAmount = 1;
      const telegramId = ctx.from!.id;
      const payment = await this.paymentService.createTestPayment(testAmount, telegramId);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å telegram_id
      const paymentUrl = await this.paymentService.generatePaymentUrl(payment.id, testAmount, telegramId);
      
      const testMessage = `
üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É

üí∞ –°—É–º–º–∞: ${testAmount} —Ä—É–±–ª–µ–π
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id.slice(0, 8)}...

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ ${this.formatLink(paymentUrl, '—Å—Å—ã–ª–∫–µ')}

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ÆKassa.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.`;

      await this.editOrSendMessage(ctx, testMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [this.getBackButton()]
        }
      });
      
    } catch (error) {
      console.error('Error creating test payment:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleMockPayment(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const orders = await this.orderService.getUserOrders(user.id);
      if (orders.length === 0) {
        await this.editOrSendMessage(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!');
        return;
      }
      
      const lastOrder = orders[0];
      
      if (lastOrder.status !== 'payment_required') {
        await this.editOrSendMessage(ctx, `–ó–∞–∫–∞–∑ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: ${this.getOrderStatusText(lastOrder.status)}`);
        return;
      }
      
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
      await this.mockService.mockSuccessfulPayment(lastOrder.id);
      
      await this.editOrSendMessage(ctx, 'üé≠ –ú–æ–∫-–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.');
      
    } catch (error) {
      console.error('Error in mock payment:', error);
      await this.editOrSendMessage(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–∫-–ø–ª–∞—Ç–µ–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleGetResult(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      
      // Get user's completed orders
      const orders = await this.orderService.getUserOrders(user.id);
      const completedOrders = orders.filter(order => order.status === 'completed');
      
      if (completedOrders.length === 0) {
        await this.editOrSendMessage(ctx, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!');
        return;
      }
      
      // Get the most recent completed order
      const latestOrder = completedOrders[0];
      
      if (!latestOrder.did_job_id) {
        await this.editOrSendMessage(ctx, '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
      
      // Check status via RunwayML API
      const runwayService = new (await import('./runway')).RunwayService();
      const status = await runwayService.checkJobStatus(latestOrder.did_job_id);
      
      if (status.status === 'SUCCEEDED' && status.output && status.output.length > 0) {
        const videoUrl = status.output[0];
        
        await this.editOrSendMessage(ctx, `üé¨ –í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüìπ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${this.formatLink(videoUrl, '–°—Å—ã–ª–∫–∞')}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Vividus Bot!`, {
          parse_mode: 'HTML'
        });
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
        setTimeout(async () => {
          await ctx.reply('üì∏ –í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ!');
        }, 2000);
      } else {
        await this.editOrSendMessage(ctx, `‚è≥ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${status.status}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      }
      
    } catch (error) {
      console.error('Error getting result:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }
  }

  private async handleSettings(ctx: Context) {
    try {
      const user = await this.userService.getUserByTelegramId(ctx.from!.id);
      const currentEmail = user?.email || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      
      const settingsMessage = `
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üìß <b>Email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:</b> ${currentEmail}

–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–∞—à email, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Å—Å–æ–≤—ã–µ —á–µ–∫–∏ –Ω–∞ –ø–æ—á—Ç—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.
–ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω, —á–µ–∫ –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç.`;

      const keyboard = [];
      
      if (currentEmail === '–Ω–µ —É–∫–∞–∑–∞–Ω') {
        keyboard.push([Markup.button.callback('‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å email', 'set_email')]);
      } else {
        keyboard.push(
          [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email', 'set_email')],
          [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å email', 'clear_email')]
        );
      }
      
      keyboard.push(this.getBackButton());

      await this.editOrSendMessage(ctx, settingsMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error('Error showing settings:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  }

  private async handleSetEmail(ctx: Context) {
    this.waitingForEmail.add(ctx.from!.id);
    await this.editOrSendMessage(ctx, 'üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:\n\n–ü—Ä–∏–º–µ—Ä: example@mail.ru', {
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_email')]
        ]
      }
    });
    await ctx.answerCbQuery();
  }

  private async handleClearEmail(ctx: Context) {
    try {
      await this.userService.updateUserEmail(ctx.from!.id, null);
      await this.editOrSendMessage(ctx, '‚úÖ Email —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      await ctx.answerCbQuery();
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
      setTimeout(() => this.handleSettings(ctx), 500);
    } catch (error) {
      console.error('Error clearing email:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ email');
    }
  }

  private async processEmailInput(ctx: Context, emailText: string) {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      
      if (!emailRegex.test(emailText.trim())) {
        await this.editOrSendMessage(ctx, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n–ü—Ä–∏–º–µ—Ä: example@mail.ru', {
          reply_markup: {
            inline_keyboard: [
              [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_email')]
            ]
          }
        });
        return;
      }

      const email = emailText.trim().toLowerCase();
      await this.userService.updateUserEmail(ctx.from!.id, email);
      this.waitingForEmail.delete(ctx.from!.id);
      
      await this.deleteUserMessage(ctx);
      await this.editOrSendMessage(ctx, `‚úÖ Email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${email}\n\n–¢–µ–ø–µ—Ä—å –∫–∞—Å—Å–æ–≤—ã–µ —á–µ–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => this.handleSettings(ctx), 2000);
      
    } catch (error) {
      console.error('Error processing email:', error);
      this.waitingForEmail.delete(ctx.from!.id);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleBuyGenerations(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const currentGenerations = await this.userService.getUserGenerations(ctx.from!.id);
      
      // –ü–∞–∫–µ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–æ —Å–∫–∏–¥–∫–æ–π 33%
      // –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã - —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
      const packages = [
        { count: 7, price: 1, isTest: true }, // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç
        { count: 1, originalPrice: 105 },
        { count: 3, originalPrice: 315 },
        { count: 5, originalPrice: 525 },
        { count: 10, originalPrice: 950 }
      ];
      
      const message = `üíº –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${currentGenerations}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç üëá`;
      
      const keyboard = packages.map(pkg => {
        let buttonText: string;
        let actualPrice: number;
        
        if (pkg.isTest) {
          actualPrice = pkg.price;
          buttonText = `üß™ ${actualPrice} ‚ÇΩ ‚Üí ${pkg.count} ${this.getGenerationWord(pkg.count)} (—Ç–µ—Å—Ç)`;
        } else {
          // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π 33% (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è * 0.67)
          actualPrice = Math.round((pkg.originalPrice as number) * 0.67);
          const originalPrice = pkg.originalPrice as number;
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞—á–µ—Ä–∫–Ω—É—Ç–æ–π —Ü–µ–Ω–æ–π
          buttonText = `~~${originalPrice}‚ÇΩ~~ ${actualPrice}‚ÇΩ ‚Üí ${pkg.count} ${this.getGenerationWord(pkg.count)} -33%`;
        }
        return [
          Markup.button.callback(
            buttonText,
            `buy_generations_${pkg.count}_${actualPrice}`
          )
        ];
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥–∞–º–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
      keyboard.push([Markup.button.callback('‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏', 'buy_generations_stars')]);
      keyboard.push(this.getBackButton());
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error('Error showing buy generations menu:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π');
    }
  }

  private async handleBuyAndProcess(ctx: Context, generationsCount: number, price: number) {
    try {
      await ctx.answerCbQuery();
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
      console.log(`üì¶ Creating generation purchase with auto-process: ${generationsCount} generations for ${price} RUB, user: ${ctx.from!.id}`);
      
      const payment = await this.paymentService.createGenerationPurchase(ctx.from!.id, generationsCount, price);
      console.log(`‚úÖ Payment created: ${payment.id}`);
      
      const paymentUrl = await this.paymentService.generateGenerationPurchaseUrl(
        payment.id,
        price,
        generationsCount,
        ctx.from!.id
      );
      console.log(`‚úÖ Payment URL generated: ${paymentUrl}`);
      
      const message = `üí≥ –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ

üì¶ –ü–∞–∫–µ—Ç: ${generationsCount} ${this.getGenerationWord(generationsCount)}
üí∞ –°—É–º–º–∞: ${price} ‚ÇΩ
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id.slice(0, 8)}...

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å
‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ ${this.formatLink(paymentUrl, '—Å—Å—ã–ª–∫–µ')}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º metadata –≤ –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const fileId = this.pendingPrompts.get(user.telegram_id);
      
      if (fileId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ metadata –ø–ª–∞—Ç–µ–∂–∞
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º pendingPrompts —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
        this.pendingPrompts.set(user.telegram_id, `process_after_payment_${payment.id}_${fileId}`);
      }
      
      await this.editOrSendMessage(ctx, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', paymentUrl)],
            this.getBackButton()
          ]
        }
      });
    } catch (error) {
      console.error('Error creating buy and process purchase:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      await this.editOrSendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${errorMessage}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    }
  }

  private async handleSingleOrderPayment(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const fileId = this.pendingPrompts.get(user.telegram_id);
      
      if (!fileId) {
        await this.editOrSendMessage(ctx, '‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ!');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
      const promptText = 'animate this image with subtle movements and breathing effect'; // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
      
      await this.editOrSendMessage(ctx, 'üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –≤ –æ–±–ª–∞–∫–æ...');
      const s3Url = await this.fileService.downloadTelegramFileToS3(fileId);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π
      const order = await this.orderService.createOrder(user.id, s3Url, 1, promptText);
      
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const payment = await this.paymentService.createPayment(order.id, order.price);
      const paymentUrl = await this.paymentService.generatePaymentUrl(payment.id, order.price);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ pending
      this.pendingPrompts.delete(user.telegram_id);
      
      const paymentMessage = `
üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞

üì∏ –§–æ—Ç–æ: –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
üé¨ –ü—Ä–æ–º–ø—Ç: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} —Ä—É–±–ª–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ ${this.formatLink(paymentUrl, '—Å—Å—ã–ª–∫–µ')}`;
      
      await this.editOrSendMessage(ctx, paymentMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', paymentUrl)],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')],
            this.getBackButton()
          ]
        }
      });
    } catch (error) {
      console.error('Error creating single order payment:', error);
      await this.editOrSendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handlePurchaseGenerations(ctx: Context, generationsCount: number, price: number) {
    try {
      await ctx.answerCbQuery();
      
      console.log(`üì¶ Creating generation purchase: ${generationsCount} generations for ${price} RUB, user: ${ctx.from!.id}`);
      
      const payment = await this.paymentService.createGenerationPurchase(ctx.from!.id, generationsCount, price);
      console.log(`‚úÖ Payment created: ${payment.id}`);
      
      const paymentUrl = await this.paymentService.generateGenerationPurchaseUrl(
        payment.id,
        price,
        generationsCount,
        ctx.from!.id
      );
      console.log(`‚úÖ Payment URL generated: ${paymentUrl}`);
      
      const message = `üí≥ –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π

üì¶ –ü–∞–∫–µ—Ç: ${generationsCount} ${this.getGenerationWord(generationsCount)}
üí∞ –°—É–º–º–∞: ${price} ‚ÇΩ
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id.slice(0, 8)}...

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ ${this.formatLink(paymentUrl, '—Å—Å—ã–ª–∫–µ')}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`;
      
      await this.editOrSendMessage(ctx, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', paymentUrl)],
            this.getBackButton()
          ]
        }
      });
    } catch (error) {
      console.error('Error creating generation purchase:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      await this.editOrSendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${errorMessage}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    }
  }

  private getGenerationWord(count: number): string {
    if (count % 10 === 1 && count % 100 !== 11) {
      return '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è';
    } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
      return '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
    } else {
      return '–≥–µ–Ω–µ—Ä–∞—Ü–∏–π';
    }
  }

  private getOrderStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
      'payment_required': 'üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
      'processing': 'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
      'completed': '‚úÖ –ì–æ—Ç–æ–≤–æ',
      'failed': '‚ùå –û—à–∏–±–∫–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
    };
    
    return statusMap[status] || status;
  }

  public async start() {
    try {
      // Set bot commands menu
      await this.bot.telegram.setMyCommands([
        { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' },
        { command: 'orders', description: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã' }
      ]);
      
      await this.bot.launch();
      console.log('Telegram bot started');
    } catch (error) {
      console.error('Failed to start bot:', error);
    }
  }

  public async stop() {
    await this.bot.stop();
  }
}
