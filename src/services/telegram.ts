import { Telegraf, Context, Markup } from 'telegraf';
import { config } from 'dotenv';
import { UserService } from './user';
import { OrderService } from './order';
import { PaymentService } from './payment';
import { RunwayService } from './runway';
import { FileService } from './file';
import { MockService } from './mock';
import { AnalyticsService } from './analytics';

config();

export class TelegramService {
  private bot: Telegraf;
  private userService: UserService;
  private orderService: OrderService;
  private paymentService: PaymentService;
  private runwayService: RunwayService;
  private fileService: FileService;
  private mockService: MockService;
  private analyticsService: AnalyticsService;
  private pendingPrompts: Map<number, string> = new Map(); // userId -> filePath

  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
    this.userService = new UserService();
    this.orderService = new OrderService();
    this.paymentService = new PaymentService();
    this.runwayService = new RunwayService();
    this.fileService = new FileService();
    this.mockService = new MockService();
    this.analyticsService = new AnalyticsService();
    
    this.setupHandlers();
  }

  private setupHandlers() {
    // Auto-welcome for new users (only for non-command messages)
    this.bot.use(async (ctx, next) => {
      if (ctx.from && ctx.message && 'text' in ctx.message && !ctx.message.text.startsWith('/')) {
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user) {
          // New user - show welcome message
          await this.handleStart(ctx);
          return;
        }
      }
      return next();
    });
    
    // Start command
    this.bot.start(this.handleStart.bind(this));
    
    // Help command
    this.bot.help(this.handleHelp.bind(this));
    
    // Mock payment command (for testing)
    this.bot.command('mock_pay', this.handleMockPayment.bind(this));
    
    // Orders command
    this.bot.command('orders', this.showUserOrders.bind(this));
    
    // Analytics command (admin only)
    this.bot.command('stats', this.showAnalytics.bind(this));
    
    // Photo handler
    this.bot.on('photo', this.handlePhoto.bind(this));
    
    // Document handler (for other image formats)
    this.bot.on('document', this.handleDocument.bind(this));
    
    // Text handler for prompts
    this.bot.on('text', this.handleText.bind(this));
    
    // Callback query handler
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    
    // Error handler
    this.bot.catch((err, ctx) => {
      console.error('Bot error:', err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  private async handleStart(ctx: Context) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ /start param, —Ç–∞–∫ –∏ deep links —á–µ—Ä–µ–∑ ctx.startParam
    let startParam = null;
    if (ctx.message && 'text' in ctx.message) {
      const textParts = ctx.message.text.split(' ');
      if (textParts.length > 1) {
        startParam = textParts[1];
      }
    }
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º deep link –ø–∞—Ä–∞–º–µ—Ç—Ä
    if (!startParam && (ctx as any).startParam) {
      startParam = (ctx as any).startParam;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å startParam, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É—á—Ç–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    const user = await this.userService.getOrCreateUser(ctx.from!, startParam || undefined);
    
    // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
    if (startParam) {
      console.log(`User ${ctx.from?.id} started bot with parameter: ${startParam}`);
      await this.analyticsService.updateCampaignStats(startParam);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    const isAdminUser = this.isAdmin(ctx.from!.id);
    console.log(`User ${ctx.from?.id} (${ctx.from?.username || 'no username'}) is admin: ${isAdminUser}`);
    
    const welcomeMessage = `
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vividus Bot!

–Ø –ø–æ–º–æ–≥—É –æ–∂–∏–≤–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Å–æ–∑–¥–∞–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ!

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±–ª–µ–π –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!`;
    
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = [
        [Markup.button.callback('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'my_orders')],
        [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')],
        [Markup.button.callback('üé≠ –¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã', 'mock_payment')],
        [Markup.button.callback('üé¨ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', 'get_result')]
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      if (this.isAdmin(ctx.from!.id)) {
        keyboard.push([Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')]);
      }

      await ctx.reply(welcomeMessage, {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
  }

  private async handleHelp(ctx: Context) {
    const helpMessage = `
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (JPG, PNG)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ!

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±–ª–µ–π –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2-5 –º–∏–Ω—É—Ç

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username

–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!`;
    
    await ctx.reply(helpMessage);
  }

  private async handlePhoto(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const photo = (ctx.message as any)['photo'];
      
      // Get the highest quality photo
      const fileId = photo[photo.length - 1].file_id;
      
      await ctx.reply('üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞—à–µ—Ç —Ä—É–∫–æ–π", "—É–ª—ã–±–∞–µ—Ç—Å—è", "–º–æ—Ä–≥–∞–µ—Ç", "–¥—ã—à–∏—Ç" –∏ —Ç.–¥.\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏.');
      
      // Store file ID for later processing (we'll upload to S3 when user provides prompt)
      this.pendingPrompts.set(user.telegram_id, fileId);
      
    } catch (error) {
      console.error('Error handling photo:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleDocument(ctx: Context) {
    const document = (ctx.message as any)['document'];
    const mimeType = document.mime_type;
    
    if (mimeType && mimeType.startsWith('image/')) {
      await this.handlePhoto(ctx);
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.');
    }
  }

  private async handleText(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      const text = (ctx.message as any).text;
      
      // Check if user has pending photo
      const fileId = this.pendingPrompts.get(user.telegram_id);
      if (!fileId) {
        // User doesn't have pending photo, treat as regular message
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏!');
        return;
      }
      
      // Remove from pending prompts
      this.pendingPrompts.delete(user.telegram_id);
      
      // Upload photo directly to S3
      await ctx.reply('üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –≤ –æ–±–ª–∞–∫–æ...');
      const s3Url = await this.fileService.downloadTelegramFileToS3(fileId);
      
      // Process the prompt
      let promptText = text.toLowerCase();
      
      if (promptText === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || promptText === 'skip') {
        promptText = 'animate this image with subtle movements and breathing effect';
      } else {
        // Translate Russian prompts to English for better AI understanding
        const translatedPrompt = this.translatePrompt(promptText);
        promptText = `animate this image with ${translatedPrompt}`;
      }
      
      await ctx.reply(`üé¨ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–º–ø—Ç: "${text}"\n\n–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑...`);
      
      // Create order with custom prompt and S3 URL
      const order = await this.orderService.createOrder(user.id, s3Url, 299, promptText);
      
      // Store custom prompt in order metadata (we'll need to add this field)
      // For now, we'll pass it through the RunwayService
      
      // Send payment request
      await this.sendPaymentRequest(ctx, order, promptText);
      
    } catch (error) {
      console.error('Error handling text:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private translatePrompt(russianPrompt: string): string {
    // Simple Russian to English translation for common animation prompts
    const translations: { [key: string]: string } = {
      '–º–∞—à–µ—Ç —Ä—É–∫–æ–π': 'waving hand',
      '—É–ª—ã–±–∞–µ—Ç—Å—è': 'smiling',
      '–º–æ—Ä–≥–∞–µ—Ç': 'blinking',
      '–¥—ã—à–∏—Ç': 'breathing',
      '–∫–∏–≤–∞–µ—Ç': 'nodding',
      '–∫–∞—á–∞–µ—Ç –≥–æ–ª–æ–≤–æ–π': 'shaking head',
      '–ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç': 'winking',
      '—Å–º–µ–µ—Ç—Å—è': 'laughing',
      '–ø–ª–∞—á–µ—Ç': 'crying',
      '–∑–ª–∏—Ç—Å—è': 'angry expression',
      '—É–¥–∏–≤–ª—è–µ—Ç—Å—è': 'surprised expression',
      '–≥—Ä—É—Å—Ç–Ω—ã–π': 'sad expression',
      '—Å—á–∞—Å—Ç–ª–∏–≤—ã–π': 'happy expression',
      '—Ç–∞–Ω—Ü—É–µ—Ç': 'dancing',
      '–±–µ–≥–∞–µ—Ç': 'running',
      '–∏–¥–µ—Ç': 'walking',
      '–ø—Ä—ã–≥–∞–µ—Ç': 'jumping',
      '—Å–∏–¥–∏—Ç': 'sitting',
      '—Å—Ç–æ–∏—Ç': 'standing',
      '–ª–µ–∂–∏—Ç': 'lying down',
      '–≥–æ–≤–æ—Ä–∏—Ç': 'speaking',
      '–ø–æ–µ—Ç': 'singing',
      '—á–∏—Ç–∞–µ—Ç': 'reading',
      '–ø–∏—à–µ—Ç': 'writing',
      '—Ä–∏—Å—É–µ—Ç': 'drawing',
      '–∏–≥—Ä–∞–µ—Ç': 'playing',
      '—Ä–∞–±–æ—Ç–∞–µ—Ç': 'working',
      '—Å–ø–∏—Ç': 'sleeping',
      '–µ—Å—Ç': 'eating',
      '–ø—å–µ—Ç': 'drinking'
    };
    
    // Try to find exact match first
    if (translations[russianPrompt]) {
      return translations[russianPrompt];
    }
    
    // Try to find partial matches
    for (const [russian, english] of Object.entries(translations)) {
      if (russianPrompt.includes(russian)) {
        return english;
      }
    }
    
    // If no translation found, return the original prompt
    // RunwayML should handle Russian text reasonably well
    return russianPrompt;
  }

  private async handleCallbackQuery(ctx: Context) {
    const callbackData = (ctx.callbackQuery as any)['data'];
    
    switch (callbackData) {
      case 'my_orders':
        await this.showUserOrders(ctx);
        break;
      case 'help':
        await this.handleHelp(ctx);
        break;
      case 'show_stats':
        await this.showAnalytics(ctx);
        break;
      case 'mock_payment':
        await this.handleMockPayment(ctx);
        break;
        case 'get_result':
          await this.handleGetResult(ctx);
          break;
        case 'pay_order':
          await this.handlePayOrder(ctx);
          break;
      default:
        if (callbackData.startsWith('pay_')) {
          const orderId = callbackData.replace('pay_', '');
          await this.handlePayOrder(ctx, orderId);
        }
        break;
    }
    
    await ctx.answerCbQuery();
  }

  private async sendPaymentRequest(ctx: Context, order: any, customPrompt?: string) {
    const paymentMessage = `
üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞

üì∏ –§–æ—Ç–æ: –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
üé¨ –ü—Ä–æ–º–ø—Ç: ${customPrompt ? `"${customPrompt}"` : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è'}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} —Ä—É–±–ª–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`;
    
    await ctx.reply(paymentMessage, {
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', `pay_${order.id}`)],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]
        ]
      }
    });
  }

  private async showUserOrders(ctx: Context) {
    const user = await this.userService.getOrCreateUser(ctx.from!);
    const orders = await this.orderService.getUserOrders(user.id);
    
    if (orders.length === 0) {
      await ctx.reply('üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!');
      return;
    }
    
    let message = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
    const completedOrders = orders.filter(order => order.status === 'completed');
    
    for (const order of orders) {
      const status = this.getOrderStatusText(order.status);
      message += `üÜî ${order.id.slice(0, 8)}...\n`;
      message += `üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
      message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} —Ä—É–±\n`;
      message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n\n`;
    }
    
    // Add buttons for completed orders
    const keyboard = [];
    if (completedOrders.length > 0) {
      keyboard.push([Markup.button.callback('üé¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', 'get_result')]);
    }
    
    await ctx.reply(message, {
      reply_markup: keyboard.length > 0 ? {
        inline_keyboard: keyboard
      } : undefined
    });
  }

  private isAdmin(userId: number): boolean {
    const adminIds = process.env.ADMIN_TELEGRAM_IDS?.split(',').map(id => parseInt(id)) || [];
    return adminIds.includes(userId);
  }

  private async showAnalytics(ctx: Context) {
    if (!this.isAdmin(ctx.from!.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      return;
    }

    try {
      const analytics = await this.analyticsService.getCampaignAnalytics();
      
      if (analytics.length === 0) {
        await ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞');
        return;
      }

      let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:\n\n';
      
      for (const stat of analytics) {
        message += `üè∑Ô∏è **${stat.campaign_name}**\n`;
        message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stat.total_users}\n`;
        message += `üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç: ${stat.total_payments_rub} —Ä—É–±\n`;
        message += `‚≠ê –°—É–º–º–∞ –≤ stars: ${stat.total_payments_stars}\n`;
        message += `üé¨ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stat.completed_orders}\n`;
        message += `üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stat.conversion_rate}%\n\n`;
      }

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing analytics:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  private async handlePayOrder(ctx: Context, orderId?: string) {
    if (!orderId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞');
      return;
    }
    
    try {
      const order = await this.orderService.getOrder(orderId);
      if (!order) {
        await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // Create payment
      const payment = await this.paymentService.createPayment(order.id, order.price);
      
      // Generate YooMoney payment URL
      const paymentUrl = await this.paymentService.generatePaymentUrl(payment.id, order.price);
      
      const paymentMessage = `
üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞

üÜî –ó–∞–∫–∞–∑: ${order.id.slice(0, 8)}...
üí∞ –°—É–º–º–∞: ${order.price} —Ä—É–±–ª–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${paymentUrl}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.`;
      
      await ctx.reply(paymentMessage);
      
    } catch (error) {
      console.error('Error creating payment:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleMockPayment(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const orders = await this.orderService.getUserOrders(user.id);
      if (orders.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!');
        return;
      }
      
      const lastOrder = orders[0];
      
      if (lastOrder.status !== 'payment_required') {
        await ctx.reply(`–ó–∞–∫–∞–∑ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: ${this.getOrderStatusText(lastOrder.status)}`);
        return;
      }
      
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
      await this.mockService.mockSuccessfulPayment(lastOrder.id);
      
      await ctx.reply('üé≠ –ú–æ–∫-–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.');
      
    } catch (error) {
      console.error('Error in mock payment:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–∫-–ø–ª–∞—Ç–µ–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleGetResult(ctx: Context) {
    try {
      const user = await this.userService.getOrCreateUser(ctx.from!);
      
      // Get user's completed orders
      const orders = await this.orderService.getUserOrders(user.id);
      const completedOrders = orders.filter(order => order.status === 'completed');
      
      if (completedOrders.length === 0) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!');
        return;
      }
      
      // Get the most recent completed order
      const latestOrder = completedOrders[0];
      
      if (!latestOrder.did_job_id) {
        await ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
      
      // Check status via RunwayML API
      const runwayService = new (await import('./runway')).RunwayService();
      const status = await runwayService.checkJobStatus(latestOrder.did_job_id);
      
      if (status.status === 'SUCCEEDED' && status.output && status.output.length > 0) {
        const videoUrl = status.output[0];
        
        await ctx.reply(`üé¨ –í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüìπ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${videoUrl}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Vividus Bot!`);
      } else {
        await ctx.reply(`‚è≥ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${status.status}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      }
      
    } catch (error) {
      console.error('Error getting result:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }
  }

  private getOrderStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
      'payment_required': 'üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
      'processing': 'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
      'completed': '‚úÖ –ì–æ—Ç–æ–≤–æ',
      'failed': '‚ùå –û—à–∏–±–∫–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
    };
    
    return statusMap[status] || status;
  }

  public async start() {
    try {
      // Set bot commands menu
      await this.bot.telegram.setMyCommands([
        { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' },
        { command: 'mock_pay', description: 'üé≠ –¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)' },
        { command: 'orders', description: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã' }
      ]);
      
      await this.bot.launch();
      console.log('Telegram bot started');
    } catch (error) {
      console.error('Failed to start bot:', error);
    }
  }

  public async stop() {
    await this.bot.stop();
  }
}
