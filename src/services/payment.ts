import pool from '../config/database';
import { PaymentStatus } from '../types';
import { config } from 'dotenv';
import axios from 'axios';
import { Telegraf } from 'telegraf';

config();

export class PaymentService {
  private bot: Telegraf;
  
  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
  }
  async createPayment(orderId: string, amount: number): Promise<any> {
    const client = await pool.connect();
    try {
      const result = await client.query(
        'INSERT INTO payments (order_id, amount, status, created_at) VALUES ($1, $2, $3, NOW()) RETURNING *',
        [orderId, amount, PaymentStatus.PENDING]
      );
      return result.rows[0];
    } finally {
      client.release();
    }
  }

  async createTestPayment(amount: number = 109, telegramId?: number): Promise<any> {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
      let userId = null;
      if (telegramId) {
        const userResult = await client.query(
          'SELECT id FROM users WHERE telegram_id = $1',
          [telegramId]
        );
        if (userResult.rows[0]) {
          userId = userResult.rows[0].id;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ order_id (NULL), –Ω–æ —Å user_id –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const result = await client.query(
        'INSERT INTO payments (order_id, user_id, amount, status, created_at) VALUES ($1, $2, $3, $4, NOW()) RETURNING *',
        [null, userId, amount, PaymentStatus.PENDING]
      );
      
      return result.rows[0];
    } finally {
      client.release();
    }
  }

  async generatePaymentUrl(paymentId: string, amount: number, telegramId?: number): Promise<string> {
    try {
      console.log('Generating payment URL for:', paymentId, amount);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ÆKassa API
      const shopId = process.env.YOOMONEY_SHOP_ID;
      const secretKey = process.env.YOOMONEY_SECRET_KEY;
      
      if (shopId && secretKey) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ÆKassa API —Å Basic Auth
        return await this.createCheckoutPayment(paymentId, amount, shopId, secretKey, telegramId);
      } else {
        throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã YOOMONEY_SHOP_ID –∏ YOOMONEY_SECRET_KEY. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ÆKassa –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.');
      }
    } catch (error) {
      console.error('Error generating payment URL:', error);
      throw error;
    }
  }

  private async createCheckoutPayment(paymentId: string, amount: number, shopId: string, secretKey: string, telegramId?: number): Promise<string> {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ Decimal –∏–∑ –ë–î)
      const numericAmount = typeof amount === 'string' ? parseFloat(amount) : Number(amount);
      
      if (isNaN(numericAmount)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã: ${amount}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa API —Å Basic Auth
      // –§–æ—Ä–º–∏—Ä—É–µ–º Basic Auth: base64(shopId:secretKey)
      const authString = Buffer.from(`${shopId}:${secretKey}`).toString('base64');
      
      const response = await axios.post(
        'https://api.yookassa.ru/v3/payments',
        {
          amount: {
            value: numericAmount.toFixed(2),
            currency: 'RUB'
          },
          confirmation: {
            type: 'redirect',
            return_url: process.env.YOOMONEY_SUCCESS_URL || `https://t.me/${process.env.TELEGRAM_BOT_TOKEN?.split(':')[0]}`
          },
          description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ${paymentId}`,
          metadata: {
            payment_id: paymentId,
            order_id: paymentId
          },
          capture: true
        },
        {
          headers: {
            'Authorization': `Basic ${authString}`,
            'Content-Type': 'application/json',
            'Idempotence-Key': paymentId
          }
        }
      );

      const yookassaPaymentId = response.data.id;
      const confirmationUrl = response.data.confirmation?.confirmation_url;
      
      if (!confirmationUrl) {
        throw new Error('–ÆKassa –Ω–µ –≤–µ—Ä–Ω—É–ª confirmation_url –≤ –æ—Ç–≤–µ—Ç–µ');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_id –æ—Ç –ÆKassa –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const client = await pool.connect();
      try {
        await client.query(
          'UPDATE payments SET yoomoney_payment_id = $1 WHERE id = $2',
          [yookassaPaymentId, paymentId]
        );
      } finally {
        client.release();
      }

      console.log('Generated –ÆKassa payment URL:', confirmationUrl);
      return confirmationUrl;
      
    } catch (error: any) {
      console.error('Error creating –ÆKassa payment:', error.response?.data || error.message);
      if (error.response?.data) {
        console.error('–ÆKassa API error details:', JSON.stringify(error.response.data, null, 2));
      }
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa: ${error.response?.data?.description || error.message}`);
    }
  }

  async updatePaymentStatus(paymentId: string, status: PaymentStatus, yoomoneyId?: string): Promise<void> {
    const client = await pool.connect();
    try {
      if (yoomoneyId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ç–∞—Ç—É—Å, –∏ yoomoney_payment_id
        await client.query(
          'UPDATE payments SET status = $1, yoomoney_payment_id = $2, updated_at = NOW() WHERE id = $3',
          [status, yoomoneyId, paymentId]
        );
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
        await client.query(
          'UPDATE payments SET status = $1, updated_at = NOW() WHERE id = $2',
          [status, paymentId]
        );
      }
    } finally {
      client.release();
    }
  }

  async verifyPayment(paymentId: string): Promise<boolean> {
    const client = await pool.connect();
    try {
      const result = await client.query(
        'SELECT status FROM payments WHERE id = $1',
        [paymentId]
      );
      return result.rows[0]?.status === PaymentStatus.SUCCESS;
    } finally {
      client.release();
    }
  }

  async getPaymentByYooMoneyId(yoomoneyPaymentId: string): Promise<any | null> {
    const client = await pool.connect();
    try {
      const result = await client.query(
        'SELECT * FROM payments WHERE yoomoney_payment_id = $1',
        [yoomoneyPaymentId]
      );
      return result.rows[0] || null;
    } finally {
      client.release();
    }
  }

  async getPaymentByMetadata(metadataPaymentId: string): Promise<any | null> {
    const client = await pool.connect();
    try {
      // –ò—â–µ–º –ø–æ id –ø–ª–∞—Ç–µ–∂–∞ (–∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ metadata.payment_id)
      const result = await client.query(
        'SELECT * FROM payments WHERE id = $1',
        [metadataPaymentId]
      );
      return result.rows[0] || null;
    } finally {
      client.release();
    }
  }

  async handlePaymentWebhook(paymentId: string, status: PaymentStatus, yoomoneyId?: string, metadata?: any): Promise<void> {
    await this.updatePaymentStatus(paymentId, status, yoomoneyId);
    
    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (status === PaymentStatus.SUCCESS) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        const client = await pool.connect();
        try {
          const paymentResult = await client.query(
            'SELECT order_id FROM payments WHERE id = $1',
            [paymentId]
          );
          
          if (paymentResult.rows[0]) {
            const orderId = paymentResult.rows[0].order_id;
            
          // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–±–µ–∑ order_id) –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ user_id –≤ –ø–ª–∞—Ç–µ–∂–µ
          if (!orderId) {
            console.log(`‚úÖ Test payment ${paymentId} succeeded (no order_id)`);
            
            // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–ª–∞—Ç–µ–∂–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º telegram_id
            const paymentWithUser = await client.query(`
              SELECT p.user_id, u.telegram_id 
              FROM payments p
              LEFT JOIN users u ON p.user_id = u.id
              WHERE p.id = $1
            `, [paymentId]);
            
            const userData = paymentWithUser.rows[0];
            
            if (userData?.telegram_id) {
              try {
                await this.bot.telegram.sendMessage(
                  userData.telegram_id,
                  '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
                );
                console.log(`‚úÖ Notification sent to test payment user ${userData.telegram_id}`);
              } catch (error) {
                console.error(`Error sending test payment notification to user ${userData.telegram_id}:`, error);
              }
            } else {
              // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å telegram_id –∏–∑ metadata (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
              const telegramId = metadata?.telegram_id;
              if (telegramId) {
                try {
                  const telegramIdNum = parseInt(telegramId, 10);
                  await this.bot.telegram.sendMessage(
                    telegramIdNum,
                    '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
                  );
                  console.log(`‚úÖ Notification sent to test payment user ${telegramIdNum} (from metadata)`);
                } catch (error) {
                  console.error(`Error sending test payment notification:`, error);
                }
              } else {
                console.log(`‚ö†Ô∏è Test payment ${paymentId} succeeded but no user_id or telegram_id found`);
              }
            }
            return;
          }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const userResult = await client.query(`
              SELECT u.telegram_id, u.start_param 
              FROM payments p
              JOIN orders o ON p.order_id = o.id
              JOIN users u ON o.user_id = u.id
              WHERE p.id = $1
            `, [paymentId]);
            
            const user = userResult.rows[0];
            
            if (user) {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
              try {
                await this.bot.telegram.sendMessage(
                  user.telegram_id,
                  '‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\nüé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ...\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç.'
                );
              } catch (error) {
                console.error(`Error sending payment success notification to user ${user.telegram_id}:`, error);
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ processing –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
              const { OrderService } = await import('./order');
              const orderService = new OrderService();
              await orderService.updateOrderStatus(orderId, 'processing' as any);
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
              const { ProcessorService } = await import('./processor');
              const processorService = new ProcessorService();
              await processorService.processOrder(orderId);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
              if (user.start_param) {
                const { AnalyticsService } = await import('./analytics');
                const analyticsService = new AnalyticsService();
                await analyticsService.updateCampaignStats(user.start_param);
              }
            }
          }
        } finally {
          client.release();
        }
      } catch (error) {
        console.error('Error handling payment webhook:', error);
      }
    }
  }
}