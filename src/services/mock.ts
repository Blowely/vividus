import { OrderService } from './order';
import { ProcessorService } from './processor';
import { UserService } from './user';

export class MockService {
  private orderService: OrderService;
  private processorService: ProcessorService;
  private userService: UserService;

  constructor() {
    this.orderService = new OrderService();
    this.processorService = new ProcessorService();
    this.userService = new UserService();
  }

  // –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
  async mockSuccessfulPayment(orderId: string): Promise<void> {
    try {
      console.log(`üé≠ Mocking successful payment for order: ${orderId}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "processing"
      await this.orderService.updateOrderStatus(orderId, 'processing' as any);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = await this.orderService.getOrder(orderId);
      if (!order) {
        throw new Error('Order not found');
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userService.getUserById(order.user_id);
      if (!user) {
        throw new Error('User not found');
      }

      console.log(`‚úÖ Mock payment successful for user: ${user.telegram_id}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
      await this.processorService.processOrder(orderId);
      
    } catch (error) {
      console.error('Error in mock payment:', error);
    }
  }

  // –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ RunwayML
  async mockRunwayProcessing(orderId: string, imagePath: string): Promise<void> {
    try {
      console.log(`üé¨ Mocking RunwayML processing for order: ${orderId}`);
      console.log(`üì∏ Image path: ${imagePath}`);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ RunwayML
      // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      
      console.log(`‚úÖ Mock RunwayML processing completed for order: ${orderId}`);
      
    } catch (error) {
      console.error('Error in mock RunwayML processing:', error);
    }
  }
}
